
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.DatabaseMetaData;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.CallableStatement;


public class Main
{
    public static void displayDbProperties(Connection con)
    {
        DatabaseMetaData dm;
        ResultSet rs;

        try
        {
            if(con != null)
            {
                dm = con.getMetaData();
                System.out.println("Driver Information");
                System.out.println("\tDriver Name: "+ dm.getDriverName());
                System.out.println("\tDriver Version: "+ dm.getDriverVersion ());
                System.out.println("\nDatabase Information ");
                System.out.println("\tDatabase Name: "+ dm.getDatabaseProductName());
                System.out.println("\tDatabase Version: "+ dm.getDatabaseProductVersion());
                System.out.println("Available Catalogs ");
                rs = dm.getCatalogs();

                while(rs.next()){
                    System.out.println("\tcatalog: "+ rs.getString(1));
                }
                rs.close();
                con.close();
            }
            else
                System.out.println("Error: No active Connection");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    public static void main(String[]argv)
    {
        Connection con = null;
        Statement st = null;
        ResultSet rs = null;

        try
        {
            con = DbConfig.getMySqlConnection();

            System.out.println("CONNECTION TO SQL SERVER SUCCESSFUL");
            displayDbProperties(con);

            if(con.isClosed()) {
                System.out.println("Connection was closed. creating new connection to MySQL");
                con = DbConfig.getMySqlConnection();
            }

            //String myVar = "Amy' ; select * from person; --";
            /* st = con.createStatement(); //without parameter returns statement
             rs = st.executeQuery("Select * from Frequents where name = 'Amy' OR pizzeria = 'Pizza Hut' ;");

            while(rs.next())
            {
                //System.out.println("name is " + rs.getString("name"));
                //System.out.println("Pizzzeria " + rs.getString("pizzeria"));
                System.out.printf("name is: %s \n ", rs.getString(1));
                System.out.printf("Pizzzeria: %s \n" , rs.getString(2));
            }*/


            System.out.println("PREPARED STATEMENT...");
            PreparedStatement pst = con.prepareStatement("Select * from Frequents;"); //with paramerter return prepared statement
            //PreparedStatement pst = con.prepareStatement("exec [dbo].[GetFrequents];");
            ResultSet rs2 = pst.executeQuery();//A table of data representing a database result set, which is usually generated by executing a statement that queries the database.

            while(rs2.next())
            {
                System.out.println("name is " + rs2.getString("name"));
                System.out.println("Pizzzeria " + rs2.getString("pizzeria"));
            }

            /*con = DbConfig.getSqliteConnection();
            PreparedStatement pst = con.prepareStatement("Select * from Album;"); //without parameter returns statement
            rs = pst.executeQuery();

            while(rs.next())
            {
                //System.out.println("name is " + rs.getString("name"));
                //System.out.println("Pizzzeria " + rs.getString("pizzeria"));
                System.out.printf("AlbumID is: %d \n", rs.getInt(1));
                System.out.printf("Title: %s \n" , rs.getString(2));
            }

            System.out.println("update/insert example");*/
            //PreparedStatement pstInsert = con.prepareStatement("INSERT INTO Person(Name, Age, Gender) VALUES('blah',25,'bar')");
//            PreparedStatement pstInsert = con.prepareStatement("INSERT INTO Person(Name, Age, Gender) VALUES(?,?,?);");
//            pstInsert.clearParameters();
//            pstInsert.setString(1, "today");
//            pstInsert.setInt(2, 22);
//            pstInsert.setString(3, "male");
//            pstInsert.executeUpdate();
//            System.out.println("update/insert complete");

            PreparedStatement pstUpdate = con.prepareStatement("UPDATE Person SET Name = ?, Age = ?, Gender = ? WHERE Name = ?");
            pstUpdate.clearParameters();
            pstUpdate.setString(1, "bret");
            pstUpdate.setInt(2, 29);
            pstUpdate.setString(3, "male");
            pstUpdate.setString(4, "today");
            pstUpdate.executeUpdate();
            System.out.println("update/insert complete");


            /*PreparedStatement pstInsert = con.prepareStatement("INSERT INTO FooBar(foo_name, foo_lastname) VALUES(?,?)", Statement.RETURN_GENERATED_KEYS);
            pstInsert.clearParameters();
            pstInsert.setString(1, "rene");
            pstInsert.setString(2, "knuth");

            pstInsert.executeUpdate();

            ResultSet rsId = pstInsert.getGeneratedKeys();
            int personId = 0;

            if (rsId.next()){
                personId = rsId.getInt(1);
            }

            System.out.println("new id :" + personId);
            System.out.println("update/insert successful");*/

            ///callable statement
            /*CallableStatement callInsert = con.prepareCall("exec[dbo].[InsertPerson] ?,?,?,?");//stored proc with identity return
            callInsert.setString(1, "foowill");
            callInsert.setInt(2, 65);
            callInsert.setString(3, "blahblah");
            callInsert.registerOutParameter(4, java.sql.Types.INTEGER);
            callInsert.execute();
            int id = callInsert.getInt(4);

            System.out.println("UNIQUE ID IS " + id);
            System.out.println("record added");*/

            ///callable statement
            /*CallableStatement callInsert = con.prepareCall("call createPerson(?,?,?)");
            callInsert.setString(1, "foowill");
            callInsert.setInt(2, 65);
            callInsert.setString(3, "blahblah");
            callInsert.execute();

            System.out.println("record added");*/
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        finally
        {
            try
            {
                if(con != null)
                    con.close();
            }
            catch (Exception ex)
            {
                ex.printStackTrace();
            }
        }
    }
}